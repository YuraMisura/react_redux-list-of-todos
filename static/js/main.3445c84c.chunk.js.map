{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","services/Filter.ts","index.tsx"],"names":["actions","todo","type","payload","removeTodo","currentTodoReducer","state","arguments","length","undefined","action","value","filterReducer","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useDispatch","useAppSelector","useSelector","TodoList","_ref","loading","dispatch","selected","_jsx","_Fragment","children","_jsxs","className","map","cn","id","completed","title","onClick","currentTodoActions","onSelectedTodo","TodoFilter","onSubmit","event","preventDefault","onChange","selectedValue","target","filterActions","placeholder","style","pointerEvents","reset","Loader","get","url","fullURL","delay","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","setLoading","useState","user","setUser","errorMessage","setErrorMessage","useEffect","userId","concat","catch","finally","href","email","name","App","selectedTodo","filteredTodos","setFilteredTodos","date","todosAction","toUpperCase","includes","trim","filterAndSortTodos","Root","Provider","Router","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3445c84c.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = { type: 'filterQuery/SET', payload: string };\ntype SetStatusAction = { type: 'filterStatus/SET', payload: string };\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filterQuery/SET',\n  payload: value,\n});\nconst setStatus = (value: string): SetStatusAction => ({\n  type: 'filterStatus/SET',\n  payload: value,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (\n  state = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filterQuery/SET':\n      return { ...state, query: action.payload };\n\n    case 'filterStatus/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET', payload: Todo[] };\ntype Actions = SetTodos;\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Actions,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n    default:\n      return [...todos];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[] | null,\n  loading: boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  loading,\n}) => {\n  const dispatch = useDispatch();\n  const selected = useAppSelector(state => state.currentTodo);\n\n  const onSelectedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!todos?.length && !loading ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos?.map(todo => (\n              <tr\n                key={todo.id}\n                data-cy=\"todo\"\n                className={cn({ 'has-background-info-light': selected })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    {todo.completed && (\n                      <i className=\"fas fa-check\" />\n                    )}\n                  </span>\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    todo.completed ? 'has-text-success' : 'has-text-danger'\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => onSelectedTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn('far', {\n                        'fa-eye-slash': selected?.id === todo.id,\n                        'far fa-eye': selected !== todo,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const handleChangeStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const selectedValue: Status = event.target.value as Status;\n\n    dispatch(filterActions.setStatus(selectedValue));\n  };\n\n  const handleChangeQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const reset = () => {\n    dispatch(filterActions.setQuery(''));\n    dispatch(filterActions.setStatus('all'));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => {\n        event.preventDefault();\n      }}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChangeStatus}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={reset}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const selected = useAppSelector(state => state.currentTodo);\n\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    setErrorMessage('');\n\n    if (selected) {\n      getUser(selected.userId)\n        .then(setUser)\n        .catch(() => setErrorMessage('Smt went wrong'))\n        .finally(() => setLoading(false));\n    }\n  }, [selected, selected?.userId]);\n\n  const closeTodoInfo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading && <Loader />}\n\n      {!!user && !loading && !errorMessage && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {selected ? `Todo #${selected.id}` : ''}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeTodoInfo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {selected?.title || ''}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selected ? (\n                <strong className={selected.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {selected.completed ? 'Done' : 'Planned'}\n                </strong>\n              ) : null}\n\n              {user ? (\n                <>\n                  {' by '}\n                  <a href={`mailto:${user?.email}`}>\n                    {user.name}\n                  </a>\n                </>\n              ) : null}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {errorMessage && (\n        <p className=\"notification is-danger\">\n          {errorMessage}\n        </p>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useAppSelector } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosAction } from './features/todos';\nimport { filterAndSortTodos } from './services/Filter';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setLoading(true);\n    setErrorMessage('');\n\n    getTodos()\n      .then(date => {\n        dispatch(todosAction.setTodos(date));\n      })\n      .catch(() => setErrorMessage('Try again later'))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setFilteredTodos(filterAndSortTodos(query, status, todos));\n  }, [query, status, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading && (<Loader />)}\n\n              {!loading && !errorMessage && (\n                <TodoList\n                  todos={filteredTodos}\n                  loading={loading}\n                />\n              )}\n\n              {!!errorMessage && (\n                <p className=\"notification is-danger\">\n                  {errorMessage}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function filterAndSortTodos(\n  query: string,\n  status: string,\n  todos: Todo[],\n) {\n  const filteredTodo = todos\n    .filter((todo) => {\n      if (status === 'active') {\n        return !todo.completed;\n      }\n\n      if (status === 'completed') {\n        return todo.completed;\n      }\n\n      return true;\n    })\n    .filter((todo) => {\n      return todo.title.toUpperCase().includes(query.toUpperCase().trim());\n    });\n\n  return filteredTodo;\n}\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}